{"version":3,"sources":["components/displayTodo.js","components/addTodo.js","App.js","serviceWorker.js","index.js"],"names":["DisplayTodo","className","this","props","items","map","item","index","key","id","type","name","term","onClick","handleCheck","bind","style","checked","textDecoration","deleteToDo","React","Component","AddTodo","state","handleChange","event","targetName","target","console","log","value","targetValue","setState","handleSubmit","preventDefault","addItem","onSubmit","onChange","placeholder","App","terms","newState","push","indexOf","splice","forceUpdate","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAEqBA,G,uLACT,IAAD,OACP,OACE,6BACE,2BAAOC,UAAU,WACf,gCACA,+BACGC,KAAKC,MAAMC,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACpB,wBAAIC,IAAKD,EAAOE,GAAIF,GAClB,4BACE,2BACEG,KAAK,WACLC,KAAML,EAAKM,KACXC,QAAS,EAAKV,MAAMW,YAAYC,KAAK,EAAMT,MAI/C,4BACE,2BACEU,MACEV,EAAKW,QACD,CAAEC,eAAgB,gBAClB,CAAEA,eAAgB,SAGvBZ,EAAKM,OAOV,4BACE,4BACEX,UAAU,iBACVY,QAAS,EAAKV,MAAMgB,WAAWJ,KAAK,EAAMT,IAF5C,iB,GAjCuBc,IAAMC,Y,OCA1BC,E,2MACnBC,MAAQ,CACNX,KAAM,I,EAERY,aAAe,SAAAC,GACb,IAAMC,EAAaD,EAAME,OAAOhB,KAChCiB,QAAQC,IAAIJ,EAAME,OAAOG,OACzB,IAAMC,EAAcN,EAAME,OAAOG,MACjC,EAAKE,SAAL,eACGN,EAAaK,K,EAIlBE,aAAe,SAAAR,GACbA,EAAMS,iBACNN,QAAQC,IAAI,SAEZ,EAAK1B,MAAMgC,QAAQ,EAAKZ,OACxB,EAAKS,SAAS,CAAEpB,KAAM,M,wEAGtB,OACE,yBAAKX,UAAU,aACb,yBAAKA,UAAU,gCACb,uBAAGA,UAAU,gBAAb,aACA,0BAAMmC,SAAUlC,KAAK+B,aAAchC,UAAU,eAC3C,2BACEU,KAAK,OACLmB,MAAO5B,KAAKqB,MAAMX,KAClByB,SAAUnC,KAAKsB,aACfvB,UAAU,uBACVS,KAAK,OACL4B,YAAY,eAEd,4BACErC,UAAU,uCAEVS,KAAK,UAHP,oB,GAlCyBW,aCuDtBkB,EApDf,2MACEhB,MAAQ,CACNnB,MAAO,CACL,CAACQ,KAAK,YAAYK,SAAS,GAC3B,CAACL,KAAM,iBAAiBK,SAAS,GAChC,CAACL,KAAK,eAAeK,SAAQ,KALpC,EAOEkB,QAAU,SAAAK,GACRZ,QAAQC,IAAI,YAAaW,EAAM5B,MAC/B,IAAM6B,EAAW,EAAKlB,MAAMnB,MACxBE,EAAK,CAACM,KAAK4B,EAAM5B,KAAKK,SAAQ,GAClCwB,EAASC,KAAKpC,GACdsB,QAAQC,IAAI,UAAWY,GACvB,EAAKT,SAAS,CAAES,cAbpB,EAeEtB,WAAa,SAAAb,GACXsB,QAAQC,IAAIvB,GACZ,IAAMC,EAAQ,EAAKgB,MAAMnB,MAAMuC,QAAQrC,GACvCsB,QAAQC,IAAItB,GAEK,EAAKgB,MAAMnB,MAAMwC,OAAOrC,EAAO,GAChDqB,QAAQC,IAAI,EAAKN,OAGjB,EAAKsB,eAxBT,EA2BE/B,YAAc,SAACR,GACb,IAAMC,EAAM,EAAKgB,MAAMnB,MAAMuC,QAAQrC,GAKrC,EAAKiB,MAAMnB,MAAMG,GAAOU,SAAS,EAAKM,MAAMnB,MAAMG,GAAOU,QAGzD,EAAK4B,eApCT,wEAuCI,OACE,yBAAK5C,UAAU,aACb,kBAAC,EAAD,CAASkC,QAASjC,KAAKiC,UACvB,kBAAC,EAAD,CACE/B,MAAOF,KAAKqB,MAAMnB,MAClBe,WAAYjB,KAAKiB,WACjBL,YAAaZ,KAAKY,mBA7C5B,GAAyBO,aCOLyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e73432b2.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class DisplayTodo extends React.Component {\n  render() {\n    return (\n      <div>\n        <table className=\"table  \">\n          <thead></thead>\n          <tbody>\n            {this.props.items.map((item, index) => (\n              <tr key={index} id={index}>\n                <td>\n                  <input\n                    type=\"checkbox\"\n                    name={item.term}\n                    onClick={this.props.handleCheck.bind(this, item)}\n                  />\n                </td>\n\n                <td>\n                  <label\n                    style={\n                      item.checked\n                        ? { textDecoration: \"line-through\" }\n                        : { textDecoration: \"none\" }\n                    }\n                  >\n                    {item.term}\n                  </label>\n                </td>\n\n                {/*  <td>\n                  <button onClick={this.addProduct}>+</button>\n                </td> */}\n                <td>\n                  <button\n                    className=\"btn btn-danger\"\n                    onClick={this.props.deleteToDo.bind(this, item)}\n                  >\n                    x\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class AddTodo extends Component {\n  state = {\n    term: \"\"\n  };\n  handleChange = event => {\n    const targetName = event.target.name;\n    console.log(event.target.value);\n    const targetValue = event.target.value;\n    this.setState({\n      [targetName]: targetValue\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"hallo\");\n\n    this.props.addItem(this.state);\n    this.setState({ term: \"\" });\n  };\n  render() {\n    return (\n      <div className=\"col-lg-12\">\n        <nav className=\"navbar navbar-light bg-light\">\n          <p className=\"navbar-brand\">ADD TO DO</p>\n          <form onSubmit={this.handleSubmit} className=\"form-inline\">\n            <input\n              name=\"term\"\n              value={this.state.term}\n              onChange={this.handleChange}\n              className=\"form-control mr-sm-2\"\n              type=\"text\"\n              placeholder=\"add To do \"\n            />\n            <button\n              className=\"btn btn-outline-success my-2 my-sm-0\"\n              //onClick={this.handleSubmit}\n              type=\"submit\"\n            >\n              add to do\n            </button>\n          </form>\n        </nav>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport DisplayTodo from \"./components/displayTodo\";\nimport AddToDo from \"./components/addTodo\";\nexport class App extends Component {\n  state = {\n    items: [\n      {term:\"go to bed\",checked: false},\n      {term: \"eate Breakfast\",checked: false},\n       {term:\"go to school\",checked:false}]\n  };\n  addItem = terms => {\n    console.log(\"i am term\", terms.term);\n    const newState = this.state.items;\n    var item={term:terms.term,checked:false};\n    newState.push(item);\n    console.log(\"haaallo\", newState);\n    this.setState({ newState });\n  };\n  deleteToDo = item => {\n    console.log(item);\n    const index = this.state.items.indexOf(item);\n    console.log(index);\n    // eslint-disable-next-line\n    const newState = this.state.items.splice(index, 1);\n    console.log(this.state);\n\n    //this.state.items.splice(this.state.items.indexOf(item), 1);\n    this.forceUpdate();\n  };\n\n  handleCheck = (item) => {\n    const index=this.state.items.indexOf(item);\n    // console.log(index);\n    // console.log(this.state.items[index]);\n    // console.log(\"before\",!this.state.items[index].checked);\n     // eslint-disable-next-line\n    this.state.items[index].checked=!this.state.items[index].checked;\n    //console.log(\"AFTER\",!this.state.items[index].checked);\n    \n    this.forceUpdate();\n  };\n  render() {\n    return (\n      <div className='container'>\n        <AddToDo addItem={this.addItem} />\n        <DisplayTodo\n          items={this.state.items}\n          deleteToDo={this.deleteToDo}\n          handleCheck={this.handleCheck}\n        ></DisplayTodo>\n        \n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}